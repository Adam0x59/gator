// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rss.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
	$1,
	$2,
	$3,
	$4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id
`

type AddFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

type AddFeedRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (AddFeedRow, error) {
	row := q.db.QueryRowContext(ctx, addFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i AddFeedRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const feed = `-- name: Feed :one
SELECT feeds.id 
FROM feeds 
WHERE feeds.url = $1
`

func (q *Queries) Feed(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, feed, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const feeds = `-- name: Feeds :many
SELECT feeds.name, feeds.url, users.name AS uname FROM feeds
INNER JOIN users ON feeds.user_id = users.id
`

type FeedsRow struct {
	Name  string
	Url   string
	Uname string
}

func (q *Queries) Feeds(ctx context.Context) ([]FeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, feeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedsRow
	for rows.Next() {
		var i FeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Uname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
